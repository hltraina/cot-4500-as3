import numpy as np
np.set_printoptions(precision=7, suppress=True, linewidth=100)

def function(t: float, y: float):
  return t - (y**2)
    
def modified_eulers(t0, t1, n, y0):
  h = (t1 - t0) / n
  for i in range(0, n):
    t = t0
    y = y0

    next_y = y + ( h * function(t,y))
   
    t0 = t + h
    y0 = next_y
  print("%.5f" % next_y, "\n")
  return None
modified_eulers(0, 2, 10, 1)  

#Question 2
def rungekutta(t0, t1, n, y0):
  h = (t1 - t0) / n
  t = t0
  y = y0
  for i in range(0, n):
    
    k1 = h * function(t, y)
    k2 = h * function(t + 0.5 * h, y + 0.5 * k1)
    k3 = h * function(t + 0.5 * h, y + 0.5 * k2)
    k4 = h * function(t + h, y + k3)
  
    next_y = y + (1.0 / 6.0)*(k1 + (k2 * 2) + (k3 *2) + k4)
   
    t = t + h
    y = next_y

  print("%.5f" % y, "\n")
  return None
rungekutta(0, 2, 10, 1) 

#Question 3
def gauss_backward():
  A = np.array([[2,-1,1],[1,3,1],[-1,5,4]], dtype=float)
  b = np.array([6,0,-3])
  n = len(b)
  Ab = np.concatenate((A, b.reshape(n,1)), axis=1)
  n = len(Ab)
  for i in range(n):
    max_row = i
    for j in range(i+1, n):
      if abs(Ab[j][i]) > abs(Ab[max_row][i]):
        max_row = j

    Ab[[i,max_row], :] = Ab[[max_row,i], :] 

    for j in range(i+1, n):
      factor = Ab[j,i] / Ab[i,i]
      Ab[j,:] -= factor * Ab[i,:]
  x = np.zeros(n)    
  for i in range(n-1, -1, -1):
    x[i] = Ab[i, n] / Ab[i,i]
    for j in range(i-1, -1, -1):
      factor = Ab[j,i]
      Ab[j,n] -= factor * x[i]
  print(x, end = "\n\n")
gauss_backward()  


#Question 4
matrix = np.array([[1,1,0,3],[2,1,-1,1],[3,-1,-1,2], [-1,2,3,-1]], dtype = 'float')
def L_U_decomp(matrix):
    size = matrix.shape[0]
    U = matrix.copy()
    L = np.eye(size, dtype = np.double)
    for i in range(size):
        factor = U[i + 1:, i] / U[i, i]
        L[i + 1:, i] = factor
        U[i + 1:] -= factor[:, np.newaxis] * U[i]
    return L, U  
print("%.5f" % np.linalg.det(matrix))
print()
L, U = L_U_decomp(matrix)
print(L)
print()
print(U)
print()

#Question 5
mat = [[9, 0, 5, 2, 1],
       [3, 9, 1, 2, 1],
       [0, 1, 7, 2, 3],
       [4, 2, 3, 12, 2],
       [3, 2, 4, 0, 8]]
n = 5
def DiagonalDomM(mat, n) :
    for i in range(0, n) :        
        sum = 0
        for j in range(0, n) :
            sum = sum + abs(mat[i][j])    
        sum = sum - abs(mat[i][i])
        if (abs(mat[i][i]) < sum) :
            return False
if((DiagonalDomM(mat, n))) :
    print ("\nTRUE\n")
else :
    print ("\nFALSE\n")  
DiagonalDomM(mat, 5)

#Question 6
#Is the Matrix positive definite?
M = np.array([[2,2,1],[2,3,0], [1,0,2]])
def positiveDef(M):
  Answ = np.all(np.linalg.eigvals(M) > 0)
  if(Answ):
    print(Answ)
  else:
    print(Answ)
positiveDef(M)    
